// infra.proto
//
// A data model for describing infrastructure as a graph.

syntax = "proto3";

package infra;

import "google/protobuf/any.proto";

enum MemoryType {
  MEM_UNSPECIFIED = 0;

  // random access memory
  MEM_RAM = 1;

  // high bandwidth memory interface for 3D stacked sync dynamic random-access memory
  MEM_HBM = 2;

  // memory that uses compute express link interconnect to the cpu
  MEM_CXL = 3;
}

message CustomComponent {
  MemoryType memory = 1;
}

message Npu {
  MemoryType memory = 1;
}

message Cpu {
  MemoryType memory = 1;
}

message Infiniband {
}

message Ethernet {
}

message Nic {
  oneof type {
    Ethernet ethernet = 10;
    Infiniband infinband = 11;
  }
}

message Pcie {
}

message NvLink {
}

message Custom {
}

message Switch {
  oneof type {
    Pcie pcie = 1;
    NvLink nvlink = 2;
    Custom custom = 3;
  }
}

// Component describes a number of components that share a specific type
message Component {
  // the name of the component
  optional string name = 1;

  // the number of this type of component
  optional uint32 count = 2;

  // the type of component
  oneof type {
    // a custom component that does not fall into one of the other messages within this type
    CustomComponent custom = 10;

    // cpu component configuration
    Cpu cpu = 11;

    // npu component configuration
    Npu npu = 12;

    // nic component configuration
    Nic nic = 13;

    // switch component configuration
    Switch switch = 14;
  }
}

enum LinkType {
  LINK_UNSPECIFIED = 0;
  LINK_CUSTOM = 1;
  LINK_ETHERNET = 2;
  LINK_PCIE = 3;
  LINK_NVLINK = 4;
  LINK_QPI = 5;
  LINK_UPI = 6;
  LINK_INFINIBAND = 7;
}

message Bandwidth {
  oneof type {
    // gigabits per second
    uint32 gbps = 1;
    // gigabytes per second
    uint32 gBs = 2;
    // giga transfers per second
    uint32 gts = 3;
  }
}

// Link describes a link between Components
message Link {
  // name of the link
  optional string name = 1;

  // type of link
  LinkType type = 2;

  // Describes the bandwidth of the link
  Bandwidth bandwidth = 10;
}

// Device contains collections of components and links and the connections
// between those components
message Device {
  // the name of the device
  optional string name = 1;

  // collection of unique components in the device
  map<string, Component> components = 3;

  // collection of unique links in the device
  map<string, Link> links = 4;

  // a list of connections that describe how Components are connected to each
  // other in a single Device
  //
  // format: The following pieces of information each separated by a "."
  //
  // - name = Component.name
  // - index < Component.count
  // - name = Link.name from one of Component.links
  // - name = Component.name
  // - index < Component.count
  //
  // examples:
  //   nic.0.pcie.cpu.0
  //   npu.0.pcie.nvswitch.0
  //   asic.0.mii.nic.0
  //
  repeated string connections = 5;
}

message DeviceInstances {
  // the name of the device instances in the topology
  // it should be used to categorize the devices
  // for example it can be Dgx1Host, ZionexHost, RackSwitch, PodSwitch,
  // SpineSwitch etc.
  optional string name = 1;

  // the name of an actual device that exists in the
  // Infrastructure.inventory.devices field
  // this allows for a Device to be reused.
  optional string device = 2;

  // the number of instances of the device in the infrastructure under this name
  optional uint32 count = 3;
}

// The Inventory message is a collection of unique devices and links present
// in the infrastructure.
// The devices and links in the inventory are meant to be reused in
// DeviceInstance, DeviceLink, ConnectionLink messages
message Inventory {
  // A collection of all unique types of devices in the infrastructure
  // Uniqueness is determined by the Device.name field.
  // This list is not an instance list instead use the DeviceInstances message
  // to create an instance of a Device and to scale it to the count present
  // in your infrastructure.
  map<string, Device> devices = 1;

  // A collection of all unique types of links in the infrastructure.
  // These links can be reused multiple times when creating connections
  // between devices.
  map<string, Link> links = 2;
}

// The Infrastructure message establishes an inventory of devices and links,
// instances of the inventory, connectivity between those instances and
// any custom user information about devices, components, links and instances.
//
// The Infrastructure can be as small as a single host connected to a switch or
// as large as multiple data centers each with different fabrics that are
// interconnected.
message Infrastructure {
  // The inventory of devices and links present in the infrastructure
  Inventory inventory = 1;

  // A list of the device instances that represents the total number of devices
  // in the infrastructure.
  repeated DeviceInstances device_instances = 2;

  // format: The following pieces of information each separated by a "."
  //
  // - name = DeviceInstance.name
  // - index < DeviceInstance.count
  // - name = Component.name
  // - index < Component.count
  // - name = Link.name from one of Infrastructure.inventory.links
  // - name = DeviceInstance.name
  // - index < DeviceInstance.count
  // - name = Component.name
  // - index < Component.count
  //
  // examples:
  //   host.0.nic.0.100gpbs.racksw.0.nic.0
  //
  repeated string connections = 3;
}
